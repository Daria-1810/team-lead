SOLID:
block1: Нарушение DIP Принцип инверсии зависимостей
В коде методы расчета площади зависят от типа фигуры.
Предлагается сделать 2 отдельных класса под каждую фигуру, где прописать свой метод расчета площади.
block2: Нарушение ISP Принцип разделения интерфейса
В классе-наследнике объявлен метод, который не нужен для данного класса
Делаем просто 2 отдельных класса - Robot, Worker
block3: Нарушение SRP Принцип единственной ответственности
Класс Customer включает в себя методы, которые не связаны друг с другом.
Должен быть отдельный класс Customer, включающий в себя метод формирования заказа, а также должен быть отдельный класс Order, где будет прописан метод уведомления клиента
block4:Нарушение SRP Принцип открытости/закрытости 
Если смотреть на текущую структуру метода, то если мы что-то поменяем в методе turn_on класса LightBulb,  то это же изменение придется учитывать и в методе класса Switch, проверять, что данное изменение не затронуло логику метода другого класса. Кажется, что тут можно исправить решение с помощью наследования класса LightBulb
block5: Нарушение LSP Принципа подстановки Лисков
В методе Penguins переопределен метод fly. Если внесем изменение в метод родительского класса Bird, то эти изменения не отразятся в методе класса Penguin, мы не дополняем метод класса-родителя, а замещаем его
Предлагается в классе Bird добавить признак, который показывает может ли летать птица или нет, и в методе fly прописать логику для этого признака: если признак = false, то выводить сообщение “This bird can’t fly”
